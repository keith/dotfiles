#!/usr/bin/env python3

from pathlib import Path
import functools
import re
import subprocess
import sys

_REPO = Path.home() / "dev/bazelbuild/bazel-central-registry"
_BASE = _REPO / "modules"


# https://github.com/bazelbuild/bazel-central-registry/blob/72637fe36c32613f039893fe821b1d5a20935401/tools/registry.py#L79
@functools.total_ordering
class Version:
    @functools.total_ordering
    class Identifier:
        def __init__(self, s):
            if not s:
                raise ValueError("identifier is empty")
            self.val = int(s) if s.isnumeric() else s

        def __eq__(self, other):
            if type(self.val) != type(other.val):
                return False
            return self.val == other.val

        def __lt__(self, other):
            if type(self.val) != type(other.val):
                return type(self.val) == int
            return self.val < other.val

    @staticmethod
    def convert_to_identifiers(s):
        if s == None:
            return None
        return [Version.Identifier(i) for i in s.split(".")]

    def __init__(self, version_str: Path):
        PATTERN = re.compile(
            r"^([a-zA-Z0-9.]+)(?:-([a-zA-Z0-9.-]+))?(?:\+[a-zA-Z0-9.-]+)?$"
        )
        m = PATTERN.match(version_str.name)
        if not m:
            raise ValueError(f"`{version_str}` is not a valid version")
        self.release = Version.convert_to_identifiers(m.groups()[0])
        self.prerelease = Version.convert_to_identifiers(m.groups()[1])

    def __eq__(self, other):
        return (self.release, self.prerelease) == (
            other.release,
            other.prerelease,
        )

    def __lt__(self, other):
        if self.release != other.release:
            return self.release < other.release
        if self.prerelease == None:
            return False
        if other.prerelease == None:
            return True
        return self.prerelease < other.prerelease


if not _REPO.exists():
    _REPO.parent.mkdir(parents=True, exist_ok=True)
    subprocess.check_call(
        ["git", "clone", "https://github.com/bazelbuild/bazel-central-registry", _REPO]
    )

subprocess.check_call(["git", "-C", _REPO, "checkout", "main"])
subprocess.check_call(["git", "-C", _REPO, "pull"])

for module in sys.argv[1:]:
    module_dir = (_BASE / module).resolve()
    if not module_dir.exists():
        loosely_matching = []
        for path in _BASE.iterdir():
            if module in path.name:
                loosely_matching.append(path.name)
        matches = ", ".join(sorted(loosely_matching))
        raise SystemExit(
            f"{module_dir} does not exist, did you mean one of these: {matches}"
        )

    versions = [v for v in module_dir.iterdir() if v.is_dir()]
    versions.sort(key=Version, reverse=True)
    print(module.lower(), ", ".join(v.name for v in versions[:10]))
    newest_version = versions[0]
    print(
        f"""\
bazel_dep(name = "{module}", version = "{newest_version.name}")"""
    )
